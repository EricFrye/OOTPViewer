package Data;

import java.io.*;
import java.util.*;

/**
 * FileLoader concurrently reads the data for a file that has been split up, which is an option in the export menu for OOTP 
 * @author Eric
 *
 */
public class FileLoader implements Runnable {

	private Scanner fd;
	private List <Entity> data;
	private List <String> mappings;
	private File src;
	private int entitiesLoaded;
	
	/**
	 * @param src The file that fd will be reading from
	 * @param fd Reference to the Scanner object which this loader will read from as generated by Holder.findAllFiles
	 * @param data Reference to Holder.data
	 * @param mappings Reference to Holder.mappings
	 */
	public FileLoader (File src, Scanner fd, List <Entity> data, List <String> mappings) {
		this.fd = fd;
		this.data = data;
		this.mappings = mappings;
		this.src = src;
	}

	public void run () {

		System.out.println(String.format("Beginning load for %s.", src.getAbsolutePath()));
		
		while (fd.hasNextLine()) {

			String line = fd.nextLine();

			Entity toAdd = new Entity (line, mappings);

			synchronized (mappings) {
				data.add(toAdd);
				entitiesLoaded++;
			}

		}
		
		System.out.println(String.format("Ending load for %s.", src.getAbsolutePath()));
		
	}
	
	/**
	 * @return Returns the amount of entities that this worker loaded
	 */
	public int getEntitiesLoaded () {
		return entitiesLoaded;
	}

}
